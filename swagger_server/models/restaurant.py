# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.address import Address  # noqa: F401,E501
from swagger_server import util


class Restaurant(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, address: Address=None, owner: str=None, emails: List[str]=None, phones: List[str]=None):  # noqa: E501
        """Restaurant - a model defined in Swagger

        :param id: The id of this Restaurant.  # noqa: E501
        :type id: int
        :param name: The name of this Restaurant.  # noqa: E501
        :type name: str
        :param address: The address of this Restaurant.  # noqa: E501
        :type address: Address
        :param owner: The owner of this Restaurant.  # noqa: E501
        :type owner: str
        :param emails: The emails of this Restaurant.  # noqa: E501
        :type emails: List[str]
        :param phones: The phones of this Restaurant.  # noqa: E501
        :type phones: List[str]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'address': Address,
            'owner': str,
            'emails': List[str],
            'phones': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'address': 'address',
            'owner': 'owner',
            'emails': 'emails',
            'phones': 'phones'
        }

        self._id = id
        self._name = name
        self._address = address
        self._owner = owner
        self._emails = emails
        self._phones = phones

    @classmethod
    def from_dict(cls, dikt) -> 'Restaurant':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Restaurant of this Restaurant.  # noqa: E501
        :rtype: Restaurant
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Restaurant.

        Internal ID of a restaurant  # noqa: E501

        :return: The id of this Restaurant.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Restaurant.

        Internal ID of a restaurant  # noqa: E501

        :param id: The id of this Restaurant.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Restaurant.

        Name of a restaurant  # noqa: E501

        :return: The name of this Restaurant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Restaurant.

        Name of a restaurant  # noqa: E501

        :param name: The name of this Restaurant.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def address(self) -> Address:
        """Gets the address of this Restaurant.


        :return: The address of this Restaurant.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """Sets the address of this Restaurant.


        :param address: The address of this Restaurant.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def owner(self) -> str:
        """Gets the owner of this Restaurant.

        Owner name  # noqa: E501

        :return: The owner of this Restaurant.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner: str):
        """Sets the owner of this Restaurant.

        Owner name  # noqa: E501

        :param owner: The owner of this Restaurant.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def emails(self) -> List[str]:
        """Gets the emails of this Restaurant.


        :return: The emails of this Restaurant.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails: List[str]):
        """Sets the emails of this Restaurant.


        :param emails: The emails of this Restaurant.
        :type emails: List[str]
        """

        self._emails = emails

    @property
    def phones(self) -> List[str]:
        """Gets the phones of this Restaurant.


        :return: The phones of this Restaurant.
        :rtype: List[str]
        """
        return self._phones

    @phones.setter
    def phones(self, phones: List[str]):
        """Sets the phones of this Restaurant.


        :param phones: The phones of this Restaurant.
        :type phones: List[str]
        """

        self._phones = phones
