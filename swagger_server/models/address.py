# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Address(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, zipcode: str=None, city: str=None, street: str=None, latitude: float=None, longitude: float=None):  # noqa: E501
        """Address - a model defined in Swagger

        :param zipcode: The zipcode of this Address.  # noqa: E501
        :type zipcode: str
        :param city: The city of this Address.  # noqa: E501
        :type city: str
        :param street: The street of this Address.  # noqa: E501
        :type street: str
        :param latitude: The latitude of this Address.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this Address.  # noqa: E501
        :type longitude: float
        """
        self.swagger_types = {
            'zipcode': str,
            'city': str,
            'street': str,
            'latitude': float,
            'longitude': float
        }

        self.attribute_map = {
            'zipcode': 'zipcode',
            'city': 'city',
            'street': 'street',
            'latitude': 'latitude',
            'longitude': 'longitude'
        }

        self._zipcode = zipcode
        self._city = city
        self._street = street
        self._latitude = latitude
        self._longitude = longitude

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def zipcode(self) -> str:
        """Gets the zipcode of this Address.

        Zipcode a.k.a. postcode  # noqa: E501

        :return: The zipcode of this Address.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode: str):
        """Sets the zipcode of this Address.

        Zipcode a.k.a. postcode  # noqa: E501

        :param zipcode: The zipcode of this Address.
        :type zipcode: str
        """
        if zipcode is None:
            raise ValueError("Invalid value for `zipcode`, must not be `None`")  # noqa: E501
        if zipcode is not None and len(zipcode) > 5:
            raise ValueError("Invalid value for `zipcode`, length must be less than or equal to `5`")  # noqa: E501
        if zipcode is not None and len(zipcode) < 5:
            raise ValueError("Invalid value for `zipcode`, length must be greater than or equal to `5`")  # noqa: E501

        self._zipcode = zipcode

    @property
    def city(self) -> str:
        """Gets the city of this Address.

        City name  # noqa: E501

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Address.

        City name  # noqa: E501

        :param city: The city of this Address.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def street(self) -> str:
        """Gets the street of this Address.

        Street name and number  # noqa: E501

        :return: The street of this Address.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street: str):
        """Sets the street of this Address.

        Street name and number  # noqa: E501

        :param street: The street of this Address.
        :type street: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def latitude(self) -> float:
        """Gets the latitude of this Address.

        Address latitude  # noqa: E501

        :return: The latitude of this Address.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this Address.

        Address latitude  # noqa: E501

        :param latitude: The latitude of this Address.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this Address.

        Address longitude  # noqa: E501

        :return: The longitude of this Address.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this Address.

        Address longitude  # noqa: E501

        :param longitude: The longitude of this Address.
        :type longitude: float
        """

        self._longitude = longitude
